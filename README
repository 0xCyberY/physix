
 - Physix Linux Project -
    MIT/GPLv2 License
===========================

Disclaimer:
============
The programs included with this project are free software; This Distribution
of GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.


Errata:
=======
The software used in Physix is constantly being updated. The best way to see fixes to
errors. warnings, and security exploits is to contribute a patch or communicate the need
for an update by opening a task on github.


Definition:
===========
Physix is an Experimental, Automated, Build-From-Source, Linux Distribution
for i386, and x86_64. It is derived from the Linux From Scratch (LFS+BLFS)
technical books.


What Physix Currently Provides:
==============================
 * physix-tool: A command line tool used for building the system from config
   files / build-recipes. Read the recipe files for information about what software
   it builds and installs.

 * A minimal base system, built from recipes: 01-toolchain.json, 02-base-system.json,
   and 03-config-base.json

 * Standard Uitilites built from: 04-utilities.json

 * X Windows Display server: 05-xorg.json

 * Display Manager: 06-lightdm.json

 * Lightweight X11 Desktop Environment (LXDE): 07-lxde.json

 * X11 Applications: 08-xapps.json
   Currently VERY minimal:
    - Xterm
    - Firefox


Installation:
=============

   Prequisites:
	P0: i386 and/or x86_64 CpU

	P1: 62 Gigabytes of blank storage space. Storage volumes sizes can be adjusted in 
            build.conf, however keep in mind that file systems have organizational
            overhead; so available space will not be exact.

	P2: No existing partitions/volumes should be present on the storage device. 


   Device Setup: 
	If your target installation device is NOT blank, use the following steps to remove existing 
        partitions and volumes from the device. If your device is already blank, skip the Device Setup steps
        and go to the Build Configuration steps.
         
        D0: Use the 'lsblk' tool to view the device tree.
	    The following example shows output of the 'lsblk' tool, depicting the host system's
                device (sda) and the target installation device (sdb).


		NAME                           MAJ:MIN RM   SIZE  RO TYPE MOUNTPOINT
		sda                              8:0     0 465.8G  0 disk
		├─sda1                           8:1     0   512M  0 part /boot/efi
		├─sda2                           8:2     0   244M  0 part /boot
		└─sda3                           8:3     0   465G  0 part
		  ├─debian--vg-root              254:0   0  23.3G  0 lvm  /
		  ├─debian--vg-swap_1            254:1   0  31.9G  0 lvm  [SWAP]
		  ├─debian--vg-var               254:8   0   9.3G  0 lvm  /var
		  ├─debian--vg-tmp               254:9   0   1.9G  0 lvm  /tmp
		  └─debian--vg-home              254:10  0 398.7G  0 lvm  /home
		sdb                               8:16   0 232.9G  0 disk
		├─sdb1                            8:17   0   600M  0 part
		├─sdb2                            8:18   0     1G  0 part
		└─sdb3                            8:19   0 231.3G  0 part
		  └─EMG-data                   253:2    0 145.6G  0 lvm

		In the preceding example, notice the following information: 
                1. The names of the storage devices on the system (sda, sdb).
                2. The existing partitions on each device (sda1, sda2, sda3, sdb1, sdb2, sdb3).
                3. The lvm volumes located on the third partition of each device
                   (debian--vg... for sda3, and EMG-data for sdb).
                4. The mountpoints suggest the system is currently running Debian.



	  D1:
              ******** USE EXTREME CAUTION ********
	      The following operations will destroy all existing data on your target 
              installation device.
	      *************************************

	     Use the 'lvremove' tool to remove all volumes from your target installation device.
              For example, to remove all volumes from device sdb: 
                $# lvremove EMG

	      In the preceding example, this would remove all volume under EMG volume group.

            D2: Use the 'parted' tool to delete all remaining partitions.
              For example, to delete all partitions from device sdb:
                $# parted /dev/sdb rm 1
                $# parted /dev/sdb rm 2
                $# parted /dev/sdb rm 3

               Running lsblk again should show nothing under the sdb device.


   Build Configuration:

        B0: Edit the build.conf file. Most values can be left to default, with the exception
            of those labeled as 'MANDATORY CONFIGS'. An example build.conf can be found in
            Documentation/build.conf-EXAMPLE

            CONF_ROOT_DEVICE=  Device NAME which new system will be installed. In referece to the
                               above example, this would be set to 'sdb'

            CONF_GRUB_SET_ROOT=  This option specifies the name and partition used to configure
                the GRUB bootloader. It is IMPORTANT to set this correctly.
                It usually takes the form of '(hd0,2)', which indicates
                Storage Disk 1, Partition 2. This config/value is defined
                by you systemd BIOS, so if unsure, consult the BIOS config.

	    CONF_GEN_USER=  login name of the a general user other than root, to be
                            created during installation

            CONF_IP_ADDRESS= IP Address of the system at first boot.

            CONF_NAMESERVER= NOT IMPLEMENTED

            CONF_DEFAULT_ROUTE= IP Address of your local network's router



   System Build:

       S0. Disk Partitioning:
           physix-tool -i build.config

       S1. Build the temporary toolchain:
           - Pull/Download sources:
             physix-tool -p 01-toolchain.json
           - Compile toolchain
             physix-tool -t 01-toolchain.json 

       S2. Build the base systemd:
           - Pull/Download sources:
             physix-tool -p 02-base-system.json
           - Compile Base system
             physix-tool -s 02-base-system.json

       S3. Configure the base system:
           physix-tool -c 03-config-base.json'

       S4. Pull source code for utilities. This is done prior to reboot 
           because the base system can not wget to the web, yet.
           physix-tool -p 04-utilities.json'

       S5. Reboot into your new base system, login as root

       S6. Build the utilities software group.
           cd /opt/physix
           physix-tool -b 04-utilities.json

       S7. Download xorg sources and Build xorg recipe:
           physix-tool -p 05-xorg.json
           physix-tool -b 05-xorg.json

       S8. Download Lightdm sources and build it:
           physix-tool -p 06.lightdm.json
           physix-tool -b 06.lightdm.json

       S9. Download LXDE sources and build it:
           physix-tool -p 07-lxde.json
           physix-tool -b 07-lxde.json


Contributions:
==============
Contributions are very welcome! :)
Please open an issue/task on github.
See TODO for what is needed.

