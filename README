
 - Physix Linux Project -
    MIT/GPLv2 License
===========================

Disclaimer:
============
The programs included with this project are free software; This Distribution
of GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by
applicable law.


Purpose:
==========
The goal of this project is to Automate the build process of a base Linux
system. It is originally inspired by the Linux From Scratch project. If you
are not familiar with LFS, Please reference the project at:
http://www.linuxfromscratch.org/ before installing Physix.

As of this version, This automation is designed to install the OS to a
single partition (defined in build.conf). No swap or boot partitions are
configured at this point.

IT IS HIGHLY RECCOMENED to use a sepperate storage device other than your host
system's. This prevents overwriting your host systems grub and rendering it
non-bootable. Also, make sure to read throught the LFS book before hand. It
will make more sense as to how this collection of scripts are organised.


Branches:
=========
Versions of this project are tracked in branches. Currently there are 2 branches,
physix-SysV, and physix-systemd. physix-SysV-LFS-8.4 is no longer supported.


Project Architecture:
=====================
The installation process is composed of 2 stages.
* STAGE 1: STAGE-1-INSTALL.sh, executes 4 Build scripts:
  - 0-init-prep.sh
    Responsible for:
	- Formatting and mounting the target disk partition.
	- Download sources defined in wget-list. Occassionaly a URL or 2
	  goes unavailable, and you will have to find the missing package
	  somewhere else. Download to /mnt/physix/sources and restart INSTALL.sh.
	- Verifying md5sums of sources, defined in md5sum.lst
	  See LFS Reference for source of md5sums:
	  http://www.linuxfromscratch.org/lfs/view/8.4/chapter03/packages.html

  - 1-build_toolchain.sh
    Responsible for:
	- Build temporary userspace system and toolchain.

  - 2-build-base-sys.sh
    Responsible for:
	- Using the toolchain built by 1-build_toolchain.sh, to build the base
          OS

  - 3-config-base-sys.sh
    Responsible for:
	- Set up network config
	- Config and install grub config to mbr
	- build and install Linux Kernel

  - Reboot.

* STAGE 2: STAGE-2-INSTALL.sh, Executes 2 build scripts.
  - 4-build-utils.sh - Build and install system related utilities.
  - 5.build-devel.sh - Build and install development related tools.


Making changes to the build process.
=====================================
The build scripts perform their designated operations by iterating through each
line of their associated csv config file. These csv files instruct build scripts
of what script to run and what source arvhive to pass to it.

If, for example, you wanted to change the version of the mutt email client, you
would edit 2 files. First edit the src-list.utils file. Update the name of the
source archive, the url where it is located, and the expected md5sum of that archive.
Then edit 4-build-utils.csv, to change the src archive name. Please note, newer
versions of software may install differently, and in that case you should
investigate build-scripts.utils/4.510-mutt.sh.

This archetecure makes it easy to change the version of the sources, and lets
you experiment across different source versions.


Installation:
=============
0. Edit build.conf
   See Example build.conf in Documentation:
1. Run ./STAGE-1-INSTALL.sh.
   During the configuration portion of the build, the user is prompted to set
   the password for the root user, and the thumbs up for installing grub.
2. Reboot.
3. ./STAGE-2-INSTALL.sh


NOTE on Debugging what happened?! :
=======================================
Output for each package build is logged to /mnt/physix/system-build-logs/$SCRIPT.
Higher level and general output for the build process is logged to,
/mnt/physix/system-build-logs/build.log


NOTE on Test Suites:
======================
It is always a good idea to run the test suites. Several test suites encounter
expected or known failures. The failed return code is checked for and reported
by the 'check' and 'chroot_check' functions. In some cases, a 3rd argument is
provided such that the Error will be logged but will not halt the build process.


Contributions:
==============
Contributions are very welcome! :)
Please open an issue/task on github.
Also see TODO.

